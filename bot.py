# import logging
# import json
# import os
# from datetime import datetime

# # === –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –î–õ–Ø GOOGLE SHEETS –ò RSS ===
# import gspread
# from google.oauth2.service_account import Credentials
# import feedparser

# from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# # === –ù–ê–°–¢–†–û–ô–ö–ò ===
# BOT_TOKEN = "78350931780:AAFJMjDn2De1bV0pfQAtXUS4pkWIc_giEzQ"
# ADMIN_USER_ID = 5207981986
# CHANNEL_USERNAME = "@nseloivanovo"

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
# GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1m1uIOOlxoaPvgeU5PcTBs_qugJkNWhcapuNpMB3gEVA"
# SERVICE_ACCOUNT_FILE = "service_account.json"  # üî¥ –¢–µ–ø–µ—Ä—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞

# # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google
# def authorize_google():
#     SCOPES = [
#         "https://www.googleapis.com/auth/spreadsheets",
#         "https://www.googleapis.com/auth/drive"
#     ]
#     creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
#     client = gspread.authorize(creds)
#     return client.open_by_url(GOOGLE_SHEET_URL)

# # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ
# try:
#     gc = authorize_google()
#     sheet_users = gc.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
#     sheet_news = gc.worksheet("–ù–æ–≤–æ—Å—Ç–∏")
#     sheet_moderation = gc.worksheet("–ú–æ–¥–µ—Ä–∞—Ü–∏—è")
#     print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google –¢–∞–±–ª–∏—Ü–µ")
# except Exception as e:
#     print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
#     exit()

# # === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
# def get_main_menu():
#     keyboard = [
#         [KeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")],
#         [KeyboardButton("‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å?"), KeyboardButton("üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏")]
#     ]
#     return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user = update.effective_user
#     text = (
#         f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
#         "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ–ª–∞ –ò–≤–∞–Ω–æ–≤–æ ‚Äî —Å–æ–±—ã—Ç–∏–µ, —Ñ–æ—Ç–æ, –∑–∞–º–µ—á–∞–Ω–∏–µ.\n"
#         "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ!\n\n"
#         "üìå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
#     )
#     await update.message.reply_text(text, reply_markup=get_main_menu())

# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     help_text = (
#         "üìù <b>–ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å:</b>\n\n"
#         "1. –ù–∞–ø–∏—à–∏—Ç–µ: <b>—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ</b>\n"
#         "2. –£–∫–∞–∂–∏—Ç–µ: <b>–≥–¥–µ –∏ –∫–æ–≥–¥–∞</b>\n"
#         "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ</b> (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n"
#         "‚úÖ –ü—Ä–∏–º–µ—Ä:\n"
#         "<i>–°–µ–≥–æ–¥–Ω—è —É–±—Ä–∞–ª–∏ –º—É—Å–æ—Ä —É —à–∫–æ–ª—ã. –ë—ã–ª–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –§–æ—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—é.</i>"
#     )
#     await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=get_main_menu())

# async def my_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user = update.effective_user
#     try:
#         records = sheet_moderation.findall(str(user.id), in_column=5)
#         count = len(records)
#         published = len([r for r in records if sheet_moderation.cell(r.row, 6).value == "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"])
#         await update.message.reply_text(
#             f"üì¨ –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ <b>{count}</b> –Ω–æ–≤–æ—Å—Ç–µ–π\n"
#             f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{published}</b>\n"
#             f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{count - published}</b>",
#             parse_mode='HTML',
#             reply_markup=get_main_menu()
#         )
#     except Exception as e:
#         await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user = update.effective_user
#     message = update.message

#     if message.photo and not message.caption:
#         await message.reply_text(
#             "üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ –Ω–∞ –Ω—ë–º.\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ: –≥–¥–µ, —á—Ç–æ, –∫–æ–≥–¥–∞?",
#             reply_markup=get_main_menu()
#         )
#         return

#     text_content = message.text or message.caption or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

#     try:
#         sheet_moderation.append_row([
#             datetime.now().strftime("%Y-%m-%d %H:%M"),
#             text_content,
#             "–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
#             f"@{user.username}" if user.username else "–∞–Ω–æ–Ω–∏–º",
#             user.id,
#             ""
#         ])

#         admin_msg = (
#             f"üì¨ –ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨ –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ\n"
#             f"üë§ {user.full_name} ({'@'+user.username if user.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
#             f"üÜî {user.id}\n\n"
#             f"üí¨ {text_content}"
#         )
#         await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_msg)

#         if message.photo:
#             photo_file = await message.photo[-1].get_file()
#             await context.bot.send_photo(chat_id=ADMIN_USER_ID, photo=photo_file.file_id)
#         if message.video:
#             video_file = await message.video.get_file()
#             await context.bot.send_video(chat_id=ADMIN_USER_ID, video=video_file.file_id)

#         await message.reply_text(
#             "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å!\n\n"
#             "–ú—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏–º. –ï—Å–ª–∏ –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üíå",
#             reply_markup=get_main_menu()
#         )
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞: {e}")
#         await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# async def published(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if update.effective_user.id != ADMIN_USER_ID:
#         return
#     if len(context.args) != 1:
#         await update.message.reply_text("UsageId: `/–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ 123456`")
#         return
#     try:
#         user_id = int(context.args[0])
#         cell = sheet_moderation.find(str(user_id), in_column=5)
#         if cell:
#             sheet_moderation.update_cell(cell.row, 6, "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
#         await context.bot.send_message(
#             chat_id=user_id,
#             text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ:\nüëâ https://ivanovo-news.ru  \n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –∂–∏–∑–Ω—å—é —Å–µ–ª–∞! ‚ù§Ô∏è"
#         )
#         await update.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è.")
#     except Exception as e:
#         await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# async def rejected(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if update.effective_user.id != ADMIN_USER_ID:
#         return
#     if len(context.args) != 1:
#         await update.message.reply_text("UsageId: `/–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ 123456`")
#         return
#     try:
#         user_id = int(context.args[0])
#         cell = sheet_moderation.find(str(user_id), in_column=5)
#         if cell:
#             sheet_moderation.update_cell(cell.row, 6, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
#         await context.bot.send_message(
#             chat_id=user_id,
#             text="–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å! –ü–æ–∫–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –µ—ë –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç! üôè"
#         )
#         await update.message.reply_text(f"‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {user_id}")
#     except Exception as e:
#         await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# async def rss_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     feed_url = f"https://rss.telega.link/channel.php?channel={CHANNEL_USERNAME.lstrip('@')}"
#     feed = feedparser.parse(feed_url)
#     if feed.entries:
#         msg = "üóû <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞:</b>\n\n"
#         for i, entry in enumerate(feed.entries[:3]):
#             title = entry.title or "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)"
#             link = entry.link
#             msg += f"{i+1}. <a href='{link}'>{title}</a>\n"
#         msg += f"\nüîó –ü–æ–ª–Ω–∞—è –ª–µ–Ω—Ç–∞: {feed_url}"
#     else:
#         msg = "üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª–µ."
#     await update.message.reply_text(msg, parse_mode='HTML', disable_web_page_preview=False)

# async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if update.effective_user.id != ADMIN_USER_ID:
#         return
#     try:
#         records = sheet_moderation.get_all_records()
#         total_news = len(records)
#         published = len([r for r in records if r.get('status') == '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'])
#         users = {}
#         for r in records:
#             uid = r['user_id']
#             users[uid] = users.get(uid, 0) + 1
#         top_users = sorted(users.items(), key=lambda x: x[1], reverse=True)[:3]
#         msg = (
#             f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
#             f"üì¨ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
#             f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published}\n\n"
#             f"üèÜ –¢–æ–ø-3 –∞–≤—Ç–æ—Ä–∞:\n"
#         )
#         for i, (uid, cnt) in enumerate(top_users, 1):
#             msg += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} ‚Äî {cnt} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
#         await update.message.reply_text(msg)
#     except Exception as e:
#         await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# # === –ó–ê–ü–£–°–ö ===
# if __name__ == '__main__':
#     app = ApplicationBuilder().token(BOT_TOKEN).build()
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(CommandHandler("help", help_command))
#     app.add_handler(CommandHandler("–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", published))
#     app.add_handler(CommandHandler("–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", rejected))
#     app.add_handler(CommandHandler("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats))
#     app.add_handler(CommandHandler("rss", rss_command))
#     app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\\?$"), help_command))
#     app.add_handler(MessageHandler(filters.Regex("^üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å$"), lambda u, c: None))
#     app.add_handler(MessageHandler(filters.Regex("^üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏$"), my_news))
#     app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO, handle_message))

#     print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë–º –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç –∂–∏—Ç–µ–ª–µ–π!")
#     app.run_polling()
import json
import os

REVIEWS_FILE = "reviews.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
def load_reviews():
    if os.path.exists(REVIEWS_FILE):
        with open(REVIEWS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
def save_reviews(reviews):
    with open(REVIEWS_FILE, "w", encoding="utf-8") as f:
        json.dump(reviews, f, ensure_ascii=False, indent=2)
import logging
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8299964233:AAFa4I3gFSjWxodUWQMx8j5W0yWkPRRhx6M"  # ‚ö†Ô∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
ADMIN_USER_ID = 5207981986  # ‚ö†Ô∏è –¢–≤–æ–π ID
CHANNEL_USERNAME = "nseloivanovo"  # ‚ö†Ô∏è –¢–æ–ª—å–∫–æ username, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ https://

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# === –•–†–ê–ù–ï–ù–ò–ï –í –ü–ê–ú–Ø–¢–ò (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞) ===
user_news_count = {}  # user_id ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
user_published = {}   # user_id ‚Üí —Å–∫–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
def get_main_menu():
    keyboard = [
        [KeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")],
        [KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [KeyboardButton("‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å?"), KeyboardButton("üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "üì¨ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ–ª–∞\n"
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∂–∏–∑–Ω–∏ –≤ –ò–≤–∞–Ω–æ–≤–æ\n\n"
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ!"
    )
    await update.message.reply_text(text, reply_markup=get_main_menu())

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìù <b>–ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å:</b>\n\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ: <b>—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ</b>\n"
        "2. –£–∫–∞–∂–∏—Ç–µ: <b>–≥–¥–µ –∏ –∫–æ–≥–¥–∞</b>\n"
        "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ</b> (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n"
        "‚úÖ –ü—Ä–∏–º–µ—Ä:\n"
        "<i>–°–µ–≥–æ–¥–Ω—è —É–±—Ä–∞–ª–∏ –º—É—Å–æ—Ä —É —à–∫–æ–ª—ã. –ë—ã–ª–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –§–æ—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—é.</i>"
    )
    await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=get_main_menu())

# /my_news ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def my_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    total = user_news_count.get(user.id, 0)
    published = user_published.get(user.id, 0)
    await update.message.reply_text(
        f"üì¨ –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ <b>{total}</b> –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{published}</b>\n"
        f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{total - published}</b>",
        parse_mode='HTML',
        reply_markup=get_main_menu()
    )

# –ü—Ä–∏—ë–º –Ω–æ–≤–æ—Å—Ç–µ–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message
    text_content = message.text or message.caption or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    if text_content == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await message.reply_text(
            "üí¨ –û—Ç–ª–∏—á–Ω–æ!\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –∂–∏–∑–Ω–∏ –≤ —Å–µ–ª–µ –ò–≤–∞–Ω–æ–≤–æ ‚Äî —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.\n\n"
            "üìå –ú–æ–∂–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=get_main_menu()
        )
        context.user_data['awaiting_review'] = True
        return

    # –ï—Å–ª–∏ –∏–¥—ë—Ç –ø—Ä–∏—ë–º –æ—Ç–∑—ã–≤–∞
    if context.user_data.get('awaiting_review'):
        context.user_data['awaiting_review'] = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É
        review_msg = (
            f"üì¨ –ù–û–í–´–ô –û–¢–ó–´–í –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò\n"
            f"üë§ {user.full_name} ({'@'+user.username if user.username else '–∞–Ω–æ–Ω–∏–º'})\n"
            f"üÜî {user.id}\n"
            f"‚è∞ {datetime.now().strftime('%H:%M %d.%m')}\n\n"
            f"üí¨ {text_content}"
        )
        try:
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=review_msg)
            await message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n\n"
                "–ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º. –ï—Å–ª–∏ –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî –¥–æ–±–∞–≤–∏–º –Ω–∞ —Å–∞–π—Ç –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å üíå",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if message.photo and not message.caption:
        await message.reply_text(
            "üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ –Ω–∞ –Ω—ë–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ: –≥–¥–µ, —á—Ç–æ, –∫–æ–≥–¥–∞?",
            reply_markup=get_main_menu()
        )
        return

    # –ü—Ä–∏—ë–º –Ω–æ–≤–æ—Å—Ç–∏
    user_news_count[user.id] = user_news_count.get(user.id, 0) + 1

    admin_msg = (
        f"üì¨ –ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨ –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò\n"
        f"üë§ {user.full_name} ({'@'+user.username if user.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
        f"üÜî {user.id}\n"
        f"‚è∞ {datetime.now().strftime('%H:%M %d.%m')}\n\n"
        f"üí¨ {text_content}"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_msg)
        if message.photo:
            photo_file = await message.photo[-1].get_file()
            await context.bot.send_photo(chat_id=ADMIN_USER_ID, photo=photo_file.file_id, caption="üì∏ –§–æ—Ç–æ –æ—Ç –∂–∏—Ç–µ–ª—è")
        if message.video:
            video_file = await message.video.get_file()
            await context.bot.send_video(chat_id=ADMIN_USER_ID, video=video_file.file_id, caption="üé• –í–∏–¥–µ–æ –æ—Ç –∂–∏—Ç–µ–ª—è")

        await message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å!\n\n"
            "–ú—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏–º. –ï—Å–ª–∏ –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üíå",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def published(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/publish <user_id>`")
        return

    try:
        user_id = int(context.args[0])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await context.bot.get_chat(user_id)
        user_name = user_info.full_name
        username = f"@{user_info.username}" if user_info.username else "–∞–Ω–æ–Ω–∏–º"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–ø—Ä–∏–º–µ—Ä)
        review_text = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∂–∏–∑–Ω–∏ —Å–µ–ª–∞!"  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å ‚Äî —Å–º. –Ω–∏–∂–µ

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã
        reviews = load_reviews()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        new_review = {
            "user_id": user_id,
            "name": user_name,
            "username": username,
            "text": review_text,
            "date": datetime.now().strftime("%d.%m.%Y")
        }
        reviews.append(new_review)
        save_reviews(reviews)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –°–ø–∞—Å–∏–±–æ!\n\n–í–∞—à –æ—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∞–π—Ç:\nüëâ https://ivanovo-news.ru/otzyvy.html\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –º–Ω–µ–Ω–∏–µ–º! ‚ù§Ô∏è"
        )
        await update.message.reply_text(f"‚úÖ –û—Ç–∑—ã–≤ –æ—Ç {user_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ reviews.json –∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /reject <user_id> ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
async def rejected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/reject <user_id>`")
        return

    try:
        user_id = int(context.args[0])
        await context.bot.send_message(
            chat_id=user_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å! –ü–æ–∫–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –µ—ë –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç! üôè"
        )
        await update.message.reply_text(f"‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {user_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return

    total_users = len(user_news_count)
    total_news = sum(user_news_count.values())
    published_total = sum(user_published.values())

    top_users = sorted(user_news_count.items(), key=lambda x: x[1], reverse=True)[:3]

    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë• –ê–≤—Ç–æ—Ä–æ–≤: {total_users}\n"
        f"üì¨ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_total}\n\n"
        f"üèÜ –¢–æ–ø-3 –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n"
    )
    for i, (uid, cnt) in enumerate(top_users, 1):
        try:
            user_info = await context.bot.get_chat(uid)
            name = user_info.first_name
            username = f" @{user_info.username}" if user_info.username else ""
            msg += f"{i}. {name}{username} ‚Äî {cnt} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        except:
            msg += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} ‚Äî {cnt} –Ω–æ–≤–æ—Å—Ç–µ–π\n"

    await update.message.reply_text(msg)

# /rss ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
async def rss_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        import feedparser
        feed_url = f"https://rss.telega.link/channel.php?channel={CHANNEL_USERNAME}"
        feed = feedparser.parse(feed_url)
        if feed.entries:
            msg = "üóû <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞:</b>\n\n"
            for i, entry in enumerate(feed.entries[:3]):
                title = entry.title or "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)"
                link = entry.link
                msg += f"{i+1}. <a href='{link}'>{title}</a>\n"
            msg += f"\nüîó –ü–æ–ª–Ω–∞—è –ª–µ–Ω—Ç–∞: {feed_url}"
        else:
            msg = "üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª–µ."
        await update.message.reply_text(msg, parse_mode='HTML', disable_web_page_preview=False)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ RSS: {e}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("publish", published))
    app.add_handler(CommandHandler("reject", rejected))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("rss", rss_command))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\\?$"), help_command))
    app.add_handler(MessageHandler(filters.Regex("^üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å$"), lambda u, c: None))
    app.add_handler(MessageHandler(filters.Regex("^üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏$"), my_news))
    app.add_handler(MessageHandler(filters.Regex("^üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), lambda u, c: None))

    # –¢–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_message))
    app.add_handler(MessageHandler(filters.VIDEO, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ñ–¥—ë–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç –∂–∏—Ç–µ–ª–µ–π!")
    app.run_polling()

#     /publish 5207981986
# –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∞
# /reject 5207981986
# –û—Ç–∫–ª–æ–Ω—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
# /stats
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∞–º
# /rss
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞