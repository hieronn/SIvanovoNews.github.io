import json
import os
import logging
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8299964233:AAFa4I3gFSjWxodUWQMx8j5W0yWkPRRhx6M"
ADMIN_USER_ID = 5207981986
CHANNEL_ID = "-1002995985111"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
NEWS_FILE = os.path.join(BASE_DIR, "news.json")
BANNED_USERS_FILE = os.path.join(BASE_DIR, "banned_users.json")
MUTED_USERS_FILE = os.path.join(BASE_DIR, "muted_users.json")
LOG_FILE = os.path.join(BASE_DIR, "moderation_log.json")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# === –•–†–ê–ù–ï–ù–ò–ï –í –ü–ê–ú–Ø–¢–ò ===
user_news_count = {}  # user_id ‚Üí —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å–ª–∞–ª
user_published = {}   # user_id ‚Üí —Å–∫–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
user_last_msg_time = {}  # user_id ‚Üí –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–Ω—Ç–∏—Å–ø–∞–º)
banned_users = set()     # user_id
muted_users = {}         # {user_id: until_datetime}
moderation_logs = []     # [{action, user_id, admin_id, timestamp, ...}]

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ ===
def load_json(filename, default=None):
    if default is None:
        default = []
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data if isinstance(data, list) else default
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
            return default
    return default

def save_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filename}: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
banned_users = set(load_json(BANNED_USERS_FILE))
muted_users_data = load_json(MUTED_USERS_FILE)
for item in muted_users_data:
    user_id = item["user_id"]
    until = datetime.fromisoformat(item["until"])
    if datetime.now() < until:
        muted_users[user_id] = until
    else:
        # –ß–∏—Å—Ç–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –º—É—Ç—ã
        pass

moderation_logs = load_json(LOG_FILE)

# === –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ ===
BAD_WORDS = {
    '–±–ª—è', '–±–ª—è–¥—å', '—Å—É–∫–∞', '—Å—É—á–∫–∞', '–µ–±–∞–Ω', '–µ–±–∞—Ç—å', '—ë–±', '—Ö—É–π', '—Ö—É—è', '—Ö—É—ë', '–ø–∏–∑–¥', '–ø–∏–∑–¥–µ—Ü', '–Ω–∞—Ö—É', '–Ω–∞–µ–±', '–∑–∞–µ–±',
    '–±–ª—è—Ç—å', '–¥–æ–ª–±–∞—ë–±', '–º—É–¥–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç–≤–∞—Ä—å', '–≤—ã—Ä–æ–¥–æ–∫', '–≥–æ–Ω–¥–æ–Ω', '—á–º–æ', '–ø–∏–¥–æ—Ä', '–ø–µ–¥–∏–∫', '—É—ë–±–∏—â–µ', '–∑–∞—ë–±',
    '–≥–æ–≤–Ω–æ', '–¥—Ä–æ—á', '–∑–∞–ª—É–ø', '–ø–æ—Ö', '–±–ª—è–¥', '—Å—É–∫–∏–Ω', '–µ–±—É—á', '–∞—Ö—É–µ–ª', '–æ—Ö—É–µ–ª', '–æ—Ö—É–µ–Ω–Ω—ã–π', '–±–ª—è–¥—Å–∫–∏–π', '–ø–∏–¥–æ—Ä–∞—Å',
    '–º—Ä–∞–∑—å', '—Å–∫–æ—Ç–∏–Ω–∞', '—à–ª—é—Ö–∞', '–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞', '–µ–±–ª–∞–Ω', '—á–ª–µ–Ω', '–≤–∞–≥–∏–Ω–∞', '–∂–æ–ø–∞', '–∞–Ω—É—Å', '–∑–∞–ª—É–ø–∞', '–µ–±–∏—Å—å', '–ø–æ—à–µ–ª –Ω–∞',
    '–∏–¥–∏ –Ω–∞', '–ø–æ—à–ª–∞ –Ω–∞', '–Ω–∞—Ö', '–Ω–∞ —Ö', '–Ω–∞ —Ö—É', '–Ω–∞ —Ö—É–π', '–Ω–∞ —Ö—É—è', '–Ω–∞ —Ö—É—ë–≤', '–Ω–∞—Ö–µ—Ä', '–Ω–∞ —Ö–µ—Ä', '–Ω–∞ —Ö—É–µ–≤', '–Ω–∞ —Ö—É—ë–≤'
}

def contains_bad_words(text):
    text = text.lower()
    return any(word in text for word in BAD_WORDS)

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
def get_main_menu():
    keyboard = [
        [KeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")],
        [KeyboardButton("‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å?"), KeyboardButton("üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_moderation_buttons(user_id):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in banned_users:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ–ª–∞ –ò–≤–∞–Ω–æ–≤–æ.\n\n"
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ!"
    )
    await update.message.reply_text(text, reply_markup=get_main_menu())

# === /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìù <b>–ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å:</b>\n\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ: <b>—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ</b>\n"
        "2. –£–∫–∞–∂–∏—Ç–µ: <b>–≥–¥–µ –∏ –∫–æ–≥–¥–∞</b>\n"
        "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ</b> (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n"
        "‚úÖ –ü—Ä–∏–º–µ—Ä:\n"
        "<i>–°–µ–≥–æ–¥–Ω—è —É–±—Ä–∞–ª–∏ –º—É—Å–æ—Ä —É —à–∫–æ–ª—ã. –ë—ã–ª–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –§–æ—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—é.</i>"
    )
    await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=get_main_menu())

# === /my_news ===
async def my_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    total = user_news_count.get(user.id, 0)
    published = user_published.get(user.id, 0)
    await update.message.reply_text(
        f"üì¨ –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ <b>{total}</b> –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{published}</b>\n"
        f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{total - published}</b>",
        parse_mode='HTML',
        reply_markup=get_main_menu()
    )

# === –ü—Ä–∏—ë–º –Ω–æ–≤–æ—Å—Ç–µ–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message
    text_content = message.text or message.caption or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if user.id in banned_users:
        await message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É—Ç–∞
    if user.id in muted_users and datetime.now() < muted_users[user.id]:
        mute_time = muted_users[user.id] - datetime.now()
        hours = int(mute_time.total_seconds() // 3600)
        await message.reply_text(f"üîá –í—ã –≤ –º—É—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á–∞—Å–æ–≤.")
        return

    # –ê–Ω—Ç–∏—Å–ø–∞–º: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 30 —Å–µ–∫—É–Ω–¥
    last_time = user_last_msg_time.get(user.id)
    if last_time and (datetime.now() - last_time).seconds < 30:
        await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—ã
    if contains_bad_words(text_content):
        muted_users[user.id] = datetime.now() + timedelta(days=3)
        save_json(MUTED_USERS_FILE, [{"user_id": uid, "until": dt.isoformat()} for uid, dt in muted_users.items()])
        await message.reply_text("ü§¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç. –í—ã –ø–æ–ª—É—á–∏–ª–∏ –º—É—Ç –Ω–∞ 3 –¥–Ω—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    user_last_msg_time[user.id] = datetime.now()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.bot_data[f"last_message_{user.id}"] = {
        "from_chat_id": message.chat_id,
        "message_id": message.message_id,
        "text": text_content,
        "has_photo": bool(message.photo),
        "has_video": bool(message.video)
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    if message.photo and not message.caption:
        await message.reply_text(
            "üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ –Ω–∞ –Ω—ë–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ: –≥–¥–µ, —á—Ç–æ, –∫–æ–≥–¥–∞?",
            reply_markup=get_main_menu()
        )
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    user_news_count[user.id] = user_news_count.get(user.id, 0) + 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    admin_msg = (
        f"üì¨ –ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨ –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò\n"
        f"üë§ {user.full_name} ({'@'+user.username if user.username else '–∞–Ω–æ–Ω–∏–º'})\n"
        f"üÜî {user.id}\n"
        f"‚è∞ {datetime.now().strftime('%H:%M %d.%m')}\n\n"
        f"üí¨ {text_content}"
    )
    try:
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=admin_msg,
            reply_markup=get_moderation_buttons(user.id)
        )
        if message.photo:
            photo_file = await message.photo[-1].get_file()
            await context.bot.send_photo(chat_id=ADMIN_USER_ID, photo=photo_file.file_id, caption="üì∏ –§–æ—Ç–æ –æ—Ç –∂–∏—Ç–µ–ª—è")
        if message.video:
            video_file = await message.video.get_file()
            await context.bot.send_video(chat_id=ADMIN_USER_ID, video=video_file.file_id, caption="üé• –í–∏–¥–µ–æ –æ—Ç –∂–∏—Ç–µ–ª—è")

        await message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å!\n\n"
            "–ú—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏–º. –ï—Å–ª–∏ –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üíå",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å / –û—Ç–∫–ª–æ–Ω–∏—Ç—å) ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = int(data.split("_")[1])

    if data.startswith("publish_"):
        await publish_news(query, context, user_id)
    elif data.startswith("reject_"):
        await reject_news(query, context, user_id)

# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ ===
async def publish_news(query, context, user_id):
    try:
        user_info = await context.bot.get_chat(user_id)
        user_name = user_info.full_name
        username = f"@{user_info.username}" if user_info.username else "–∞–Ω–æ–Ω–∏–º"

        last_msg = context.bot_data.get(f"last_message_{user_id}")
        if not last_msg:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ news.json
        news = load_json(NEWS_FILE)
        news.insert(0, {
            "user_id": user_id,
            "name": user_name,
            "username": username,
            "text": last_msg["text"],
            "date": datetime.now().strftime("%d.%m.%Y"),
            "timestamp": datetime.now().isoformat()
        })
        save_json(NEWS_FILE, news)

        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.forward_message(
            chat_id=CHANNEL_ID,
            from_chat_id=last_msg["from_chat_id"],
            message_id=last_msg["message_id"]
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                 f"–í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:\n"
                 f"üëâ https://t.me/nseloivanovo\n\n"
                 f"üåê –°–∞–π—Ç: https://hieronn.github.io/SIvanovoNews.github.io/"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_published[user_id] = user_published.get(user_id, 0) + 1

        # üîπ –°–û–•–†–ê–ù–Ø–ï–ú –õ–û–ì
        log_entry = {
            "action": "published",
            "admin_id": query.from_user.id,
            "admin_name": query.from_user.full_name,
            "user_id": user_id,
            "user_name": user_name,
            "text_preview": last_msg["text"][:100] + ("..." if len(last_msg["text"]) > 100 else ""),
            "timestamp": datetime.now().isoformat()
        }
        moderation_logs.append(log_entry)
        save_json(LOG_FILE, moderation_logs)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç {user_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç."
        )
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
async def reject_news(query, context, user_id):
    try:
        user_info = await context.bot.get_chat(user_id)
        user_name = user_info.full_name

        await context.bot.send_message(
            chat_id=user_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å! –ü–æ–∫–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –µ—ë –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç! üôè"
        )

        # üîπ –°–û–•–†–ê–ù–Ø–ï–ú –õ–û–ì
        log_entry = {
            "action": "rejected",
            "admin_id": query.from_user.id,
            "admin_name": query.from_user.full_name,
            "user_id": user_id,
            "user_name": user_name,
            "text_preview": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
        moderation_logs.append(log_entry)
        save_json(LOG_FILE, moderation_logs)

        await query.edit_message_text(f"‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {user_name}")
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ===

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/ban <user_id>`")
        return
    try:
        user_id = int(context.args[0])
        banned_users.add(user_id)
        save_json(BANNED_USERS_FILE, list(banned_users))
        await context.bot.send_message(chat_id=user_id, text="üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/unban <user_id>`")
        return
    try:
        user_id = int(context.args[0])
        banned_users.discard(user_id)
        save_json(BANNED_USERS_FILE, list(banned_users))
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/mute <user_id>`")
        return
    try:
        user_id = int(context.args[0])
        muted_users[user_id] = datetime.now() + timedelta(days=3)
        save_json(MUTED_USERS_FILE, [{"user_id": uid, "until": dt.isoformat()} for uid, dt in muted_users.items()])
        await context.bot.send_message(chat_id=user_id, text="üîá –í—ã –≤ –º—É—Ç–µ –Ω–∞ 3 –¥–Ω—è.")
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –º—É—Ç –Ω–∞ 3 –¥–Ω—è.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/unmute <user_id>`")
        return
    try:
        user_id = int(context.args[0])
        muted_users.pop(user_id, None)
        save_json(MUTED_USERS_FILE, [{"user_id": uid, "until": dt.isoformat()} for uid, dt in muted_users.items()])
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    total_users = len(user_news_count)
    total_news = sum(user_news_count.values())
    published_total = sum(user_published.values())
    muted_count = len(muted_users)
    banned_count = len(banned_users)

    msg = (
        f"üõ°Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì¨ –ù–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏—Å–ª–∞–Ω–æ: {total_news}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_total}\n"
        f"üîá –í –º—É—Ç–µ: {muted_count}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/ban <id> ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å\n"
        f"/unban <id> ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å\n"
        f"/mute <id> ‚Äî –º—É—Ç 3 –¥–Ω—è\n"
        f"/unmute <id> ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å\n"
        f"/logs ‚Äî –∏—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    )
    await update.message.reply_text(msg, parse_mode='HTML')

# === /logs ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ===
async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return

    logs = moderation_logs
    if not logs:
        await update.message.reply_text("üìù –õ–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = "üìã <b>–õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n"
    for log in reversed(logs[-10:]):
        time = datetime.fromisoformat(log["timestamp"]).strftime("%H:%M %d.%m")
        action = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if log["action"] == "published" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        msg += (
            f"<b>{action}</b> –≤ <code>{time}</code>\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {log['user_name']} (ID: {log['user_id']})\n"
            f"üëÆ <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {log['admin_name']}\n"
            f"üí¨ <i>{log['text_preview']}</i>\n\n"
        )

    await update.message.reply_text(msg, parse_mode='HTML')

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("my_news", my_news))
    app.add_handler(CommandHandler("ban", ban))
    app.add_handler(CommandHandler("unban", unban))
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CommandHandler("logs", logs_command))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\\?$"), help_command))
    app.add_handler(MessageHandler(filters.Regex("^üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å$"), lambda u, c: None))
    app.add_handler(MessageHandler(filters.Regex("^üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏$"), my_news))

    # –ö–æ–Ω—Ç–µ–Ω—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_message))
    app.add_handler(MessageHandler(filters.VIDEO, handle_message))

    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    app.add_handler(CallbackQueryHandler(button_callback))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()