import json
import os
import logging
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8299964233:AAFa4I3gFSjWxodUWQMx8j5W0yWkPRRhx6M"
ADMIN_USER_ID = 5207981986
CHANNEL_ID = "-1002995985111"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
NEWS_FILE = os.path.join(BASE_DIR, "news.json")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# === –•–†–ê–ù–ï–ù–ò–ï ===
user_news_count = {}
user_published = {}

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π ===
def load_json(filename):
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data if isinstance(data, list) else []
        except (json.JSONDecodeError, IOError):
            return []
    return []

def save_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filename}: {e}")

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤") ===
def get_main_menu():
    keyboard = [
        [KeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")],
        [KeyboardButton("‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å?"), KeyboardButton("üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–µ–ª–∞ –ò–≤–∞–Ω–æ–≤–æ.\n\n"
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ!"
    )
    await update.message.reply_text(text, reply_markup=get_main_menu())

# === /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìù <b>–ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å:</b>\n\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ: <b>—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ</b>\n"
        "2. –£–∫–∞–∂–∏—Ç–µ: <b>–≥–¥–µ –∏ –∫–æ–≥–¥–∞</b>\n"
        "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ</b> (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n"
        "‚úÖ –ü—Ä–∏–º–µ—Ä:\n"
        "<i>–°–µ–≥–æ–¥–Ω—è —É–±—Ä–∞–ª–∏ –º—É—Å–æ—Ä —É —à–∫–æ–ª—ã. –ë—ã–ª–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –§–æ—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—é.</i>"
    )
    await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=get_main_menu())

# === /my_news ===
async def my_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    total = user_news_count.get(user.id, 0)
    published = user_published.get(user.id, 0)
    await update.message.reply_text(
        f"üì¨ –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ <b>{total}</b> –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{published}</b>\n"
        f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{total - published}</b>",
        parse_mode='HTML',
        reply_markup=get_main_menu()
    )

# === –ü—Ä–∏—ë–º –Ω–æ–≤–æ—Å—Ç–µ–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message
    text_content = message.text or message.caption or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.bot_data[f"last_message_{user.id}"] = {
        "from_chat_id": message.chat_id,
        "message_id": message.message_id,
        "text": text_content,
        "has_photo": bool(message.photo),
        "has_video": bool(message.video)
    }

    if message.photo and not message.caption:
        await message.reply_text(
            "üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ –Ω–∞ –Ω—ë–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ: –≥–¥–µ, —á—Ç–æ, –∫–æ–≥–¥–∞?",
            reply_markup=get_main_menu()
        )
        return

    # –ü—Ä–∏—ë–º –Ω–æ–≤–æ—Å—Ç–∏
    user_news_count[user.id] = user_news_count.get(user.id, 0) + 1
    admin_msg = (
        f"üì¨ –ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨ –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò\n"
        f"üë§ {user.full_name} ({'@'+user.username if user.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
        f"üÜî {user.id}\n"
        f"‚è∞ {datetime.now().strftime('%H:%M %d.%m')}\n\n"
        f"üí¨ {text_content}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_msg)
        if message.photo:
            photo_file = await message.photo[-1].get_file()
            await context.bot.send_photo(chat_id=ADMIN_USER_ID, photo=photo_file.file_id, caption="üì∏ –§–æ—Ç–æ –æ—Ç –∂–∏—Ç–µ–ª—è")
        if message.video:
            video_file = await message.video.get_file()
            await context.bot.send_video(chat_id=ADMIN_USER_ID, video=video_file.file_id, caption="üé• –í–∏–¥–µ–æ –æ—Ç –∂–∏—Ç–µ–ª—è")

        await message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å!\n\n"
            "–ú—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏–º. –ï—Å–ª–∏ –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî –æ–ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç–µ, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üíå",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

# === /publish <user_id> ===
async def published(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("UsageId: `/publish <user_id>`")
        return

    try:
        user_id = int(context.args[0])
        user_info = await context.bot.get_chat(user_id)
        user_name = user_info.full_name

        last_msg = context.bot_data.get(f"last_message_{user_id}")
        if not last_msg:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = load_json(NEWS_FILE)
        news.insert(0, {
            "user_id": user_id,
            "name": user_name,
            "username": f"@{user_info.username}" if user_info.username else "–∞–Ω–æ–Ω–∏–º",
            "text": last_msg["text"],
            "date": datetime.now().strftime("%d.%m.%Y"),
            "timestamp": datetime.now().isoformat()
        })
        save_json(NEWS_FILE, news)

        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.forward_message(
            chat_id=CHANNEL_ID,
            from_chat_id=last_msg["from_chat_id"],
            message_id=last_msg["message_id"]
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:\nüëâ https://t.me/nseloivanovo\n\n–°–∞–π—Ç: https://hieronn.github.io/SIvanovoNews.github.io/"
        )
        await update.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç {user_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")

        user_published[user_id] = user_published.get(user.id, 0) + 1

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === /reject, /stats, /rss ===
async def rejected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    if len(context.args) != 1:
        return
    user_id = int(context.args[0])
    await context.bot.send_message(chat_id=user_id, text="–°–ø–∞—Å–∏–±–æ! –ü–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å!")
    await update.message.reply_text(f"‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {user_id}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    total_users = len(user_news_count)
    total_news = sum(user_news_count.values())
    published_total = sum(user_published.values())
    await update.message.reply_text(f"üìä –ê–≤—Ç–æ—Ä–æ–≤: {total_users}\nüì¨ –ù–æ–≤–æ—Å—Ç–µ–π: {total_news}\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_total}")

async def rss_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        import feedparser
        feed = feedparser.parse("https://rss.telega.link/channel.php?channel=nseloivanovo")
        msg = "üóû –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for i, e in enumerate(feed.entries[:3]):
            title = e.title or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            msg += f"{i+1}. {title}\n"
        await update.message.reply_text(msg)
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ RSS")

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("publish", published))
    app.add_handler(CommandHandler("reject", rejected))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("rss", rss_command))
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\\?$"), help_command))
    app.add_handler(MessageHandler(filters.Regex("^üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å$"), lambda u, c: None))
    app.add_handler(MessageHandler(filters.Regex("^üìä –ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏$"), my_news))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_message))
    app.add_handler(MessageHandler(filters.VIDEO, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()